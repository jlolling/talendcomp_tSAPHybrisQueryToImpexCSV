<%@ jet 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn 
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory
		org.talend.core.model.utils.NodeUtil
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.metadata.types.JavaTypesManager
		java.util.List 
		java.util.ArrayList 
    	java.util.Map		
	" 
%>
<% 
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode) codeGenArgument.getArgument();
	String cid = node.getUniqueName();
	IConnection conn = null;
	List<? extends IConnection> outConns = NodeUtil.getOutgoingConnections(node, IConnectionCategory.DATA);
	if (outConns.size() > 0) {
		conn = outConns.get(0);
	}
	List<IMetadataColumn> listColumns = new ArrayList<IMetadataColumn>(); // dummy
	List<IMetadataTable> metadatas = node.getMetadataList();
	if (metadatas != null && metadatas.size() > 0) {
    	IMetadataTable metadata = metadatas.get(0);
    	if (metadata != null) {
    		listColumns = metadata.getListColumns();
		}
	}
    String connectionName = ElementParameterParser.getValue(node, "__CONNECTION__");
    List<Map<String, String>> configList = (List<Map<String,String>>) ElementParameterParser.getObjectValue(node, "__COLUMN_CONFIG__");
	String csvColumn = ElementParameterParser.getValue(node, "__CSV_COLUMN__");
	String fetchSize = ElementParameterParser.getValue(node, "__FETCH_SIZE__");
	if (fetchSize == null || fetchSize.trim().isEmpty()) {
		fetchSize = "null";
	}
    String query = ElementParameterParser.getValue(node, "__QUERY__");
    if (query != null) {
	   query = query.trim().replace("\r", "").replace("\n", "\\n\" +\n\"");
    } else {
   	   query = "null";
    }
%>
	int nb_line_<%=cid%> = 0;
	de.jlo.talendcomp.hac.query2impex.QueryRunner <%=cid%> = new de.jlo.talendcomp.hac.query2impex.QueryRunner();
	// add outgoing schema columns for separate extraction	
	<%=cid%>.setFetchSize(<%=fetchSize%>);
<%	for (int i = 0; i < listColumns.size(); i++) {
		IMetadataColumn mc = listColumns.get(i);
		String name = mc.getLabel();
		if (name.equalsIgnoreCase(csvColumn)) {
			continue;
		} 
		Map<String, String> config = configList.get(i);
		boolean exclude = "true".equals(config.get("EXCLUDE_FROM_CSV")); %>
	<%=cid%>.addSeparatedColumn("<%=name%>", <%=exclude%>);
<%	} %>
	// run query
	<%=cid%>.setConnection((java.sql.Connection) globalMap.get("conn_<%=connectionName%>"));
	try {
		String query = <%=query%>;
		globalMap.put("<%=cid%>_QUERY", query);
		<%=cid%>.executeQuery(query);
	} catch (Exception e) {
		String message = e.getMessage();
		globalMap.put("<%=cid%>_ERROR_MESSAGE", message);
		throw e;
	}
<%  if (conn != null) { %>
	while (<%=cid%>.next()) {
		nb_line_<%=cid%>++;
<%		for (int i = 0; i < listColumns.size(); i++) {
			IMetadataColumn mc = listColumns.get(i);
			String name = mc.getLabel();
			String javaClassName = mc.getTalendType().substring(3);
			boolean isDateValue = javaClassName.contains("Date");
			boolean isNullable = mc.isNullable(); %>
		try {
<%			if (name.equalsIgnoreCase(csvColumn)) { %>
		<%=conn.getName()%>.<%=csvColumn%> = <%=cid%>.getCSVLine();
<%			} else if (isDateValue) { 
				String pattern = mc.getPattern(); 
				if (pattern == null || pattern.trim().isEmpty()) {
					pattern = "null";
				} %>
		<%=conn.getName()%>.<%=mc.getLabel()%> = <%=cid%>.getOutputValueAsDate("<%=name%>",<%=isNullable%>,<%=pattern%>);
<%			} else { %>
		<%=conn.getName()%>.<%=mc.getLabel()%> = <%=cid%>.getOutputValueAs<%=javaClassName%>("<%=name%>",<%=isNullable%>);
<%			} %>
		} catch (Exception ve) {
			String message = "Get value for column: <%=name%> failed: " + ve.getMessage();
			globalMap.put("<%=cid%>_ERROR_MESSAGE", message);
			throw new Exception(message, ve);
		}
<%		} // for
	} if (conn != null) %>
	